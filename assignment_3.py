# -*- coding: utf-8 -*-
"""Assignment-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1puUy_i4ubtyAimgwn7J7k0bzzEzNHHKa
"""

!pip install torch torchvision numpy tqdm

import torch
from torch import nn, optim
from torch.utils.data import DataLoader, Dataset
from torchvision import datasets
import numpy as np

class CustomFashionMNIST(Dataset):
    def __init__(self, root='./data', train=True, transform=None):
        self.dataset = datasets.FashionMNIST(root=root, train=train, download=True)
        self.data = self.dataset.data.float().unsqueeze(1) / 255.0
        self.labels = self.dataset.targets
        self.transform = transform

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        image, label = self.data[idx], self.labels[idx]
        if self.transform:
            image = self.transform(image)
        return image, label

class FashionModel(nn.Module):
    def __init__(self):
        super(FashionModel, self).__init__()
        self.model = nn.Sequential(
            nn.Conv2d(1, 32, 3, padding=1), nn.BatchNorm2d(32), nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(32, 64, 3, padding=1), nn.BatchNorm2d(64), nn.ReLU(),
            nn.MaxPool2d(2, 2),
            nn.Conv2d(64, 128, 3, padding=1), nn.BatchNorm2d(128), nn.ReLU(),
            nn.Flatten(),
            nn.Linear(128 * 7 * 7, 256), nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(256, 10)
        )

    def forward(self, x):
        return self.model(x)

class ModelTrainer:
    def __init__(self, model, device, learning_rate=0.001):
        self.model = model.to(device)
        self.device = device
        self.criterion = nn.CrossEntropyLoss()
        self.optimizer = optim.Adam(self.model.parameters(), lr=learning_rate)
        self.best_accuracy = 0.0

    def train_epoch(self, data_loader):
        self.model.train()
        running_loss = 0.0
        for images, labels in data_loader:
            images, labels = images.to(self.device), labels.to(self.device)
            self.optimizer.zero_grad()
            outputs = self.model(images)
            loss = self.criterion(outputs, labels)
            loss.backward()
            self.optimizer.step()
            running_loss += loss.item()
        return running_loss / len(data_loader)

    def evaluate(self, data_loader):
        self.model.eval()
        correct, total = 0, 0
        with torch.no_grad():
            for images, labels in data_loader:
                images, labels = images.to(self.device), labels.to(self.device)
                outputs = self.model(images)
                _, predicted = torch.max(outputs, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()
        return 100 * correct / total

    def save_best_model(self, epoch, accuracy, filename='CNN_Model.pt'):
        if accuracy > self.best_accuracy:
            self.best_accuracy = accuracy
            torch.save({
                'epoch': epoch,
                'model_state_dict': self.model.state_dict(),
                'accuracy': accuracy
            }, filename)
            print(f"New best model saved with accuracy {accuracy:.2f}% at epoch {epoch}.")

    def load_model(self, filename='CNN_Model.pt'):
        checkpoint = torch.load(filename, map_location=self.device)
        self.model.load_state_dict(checkpoint['model_state_dict'])
        self.best_accuracy = checkpoint['accuracy']
        print(f"Model loaded with accuracy {self.best_accuracy:.2f}%.")

def main():
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"Using device: {device}")

    train_dataset = CustomFashionMNIST(train=True)
    test_dataset = CustomFashionMNIST(train=False)
    train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)

    model = FashionModel()
    trainer = ModelTrainer(model, device)

    num_epochs = 108
    print("Starting training")
    for epoch in range(1, num_epochs + 1):
        train_loss = trainer.train_epoch(train_loader)
        print(f"Epoch {epoch} | Training Loss: {train_loss:.4f}")

        test_accuracy = trainer.evaluate(test_loader)
        print(f"Epoch {epoch} | Test Accuracy: {test_accuracy:.2f}%")

        trainer.save_best_model(epoch, test_accuracy)

    print(f"\nTraining complete. Best accuracy: {trainer.best_accuracy:.2f}%")

if __name__ == "__main__":
    main()

